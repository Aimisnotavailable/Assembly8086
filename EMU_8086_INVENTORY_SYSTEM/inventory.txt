.MODEL SMALL 

.DATA

    ;CONSTANT UTILS
    MAX_NAME_SIZE   EQU 40
    MAX_ID_SIZE     EQU 10
    MAX_ITEM_COUNT  EQU 3
    MAX_QTY_SIZE    EQU 5
    
    ;UTILS
    NAME_MSG DB 'ITEM: $'
    ID_MSG DB 'ID: $'
    QTY_MSG DB 'QTY : $'
    SLOT_MSG DB 'SLOT: $'
    NOT_FOUND_MSG DB 'ITEM NOT FOUND$'
    ITEM_DELETED_MSG DB 'ITEM DELETED$'
    
    EMPTY_REGISTRY_MSG DB 'THE INVENTORY IS EMPTY$'
    FULL_LOT_MSG DB 'THE INVENTORY IS FULL$'
    
    ALREADY_EXIST_MSG DB 'ITEM ALREADY EXIST$'
    
    SHELF DB  ' ', MAX_NAME_SIZE + 8 DUP('='),     0DH, 0AH,
          DB  '|', MAX_NAME_SIZE + 8 DUP(' '),'|', 0DH, 0AH,
          DB  '|', MAX_NAME_SIZE + 8 DUP(' '),'|', 0DH, 0AH,
          DB  '|', MAX_NAME_SIZE + 8 DUP(' '),'|', 0DH, 0AH,
          DB  '|', MAX_NAME_SIZE + 8 DUP(' '),'|', 0DH, 0AH,
          DB  '|', MAX_NAME_SIZE + 8 DUP(' '),'|', 0DH, 0AH,
          DB  '|', MAX_NAME_SIZE + 8 DUP(' '),'|', 0DH, 0AH,
          DB  ' ', MAX_NAME_SIZE + 8 DUP('='), '$',0DH, 0AH

        
    SHELF_ROW DB 2
    SHELF_COL EQU 2
    
    ;COUNTERS
    CURRENT_ITEM_COUNT DB 0
    COUNTER DW 0
    
    ITEM_PRINTED DB 0
    ITEM_SEARCHED DB 0
    
    ;STORAGE
    ITEM_NAMES          DB MAX_NAME_SIZE * MAX_ITEM_COUNT DUP('*')
    ITEM_IDS            DB MAX_ID_SIZE * MAX_ITEM_COUNT DUP('*')
    ITEM_QTY            DB MAX_QTY_SIZE * MAX_ITEM_COUNT DUP('*')
    SEARCH_ID           DB MAX_ID_SIZE DUP ('*')
    TAKEN_LIST          DB MAX_ITEM_COUNT DUP (0)
    
    ;MENU OPTIONS
    MENU_TEXT          DB 'Options:', 0DH, 0AH, '[1] Add Item', 0DH, 0AH,
                       DB   '[2] Update Item', 0DH, 0AH, 
                       DB   '[3] Display Inventory', 0DH, 0AH,
                       DB   '[4] Remove Item ', 0DH, 0AH, 
                       DB   '[5] Exit', 0DH, 0AH,
                       DB    0DH, 0AH, 'Enter your choice: $'
    
    UPDATE_TEXT        DB 'Choose data to update:', 0DH, 0AH,
                       DB '[1] ITEM ID', 0DH, 0AH,
                       DB '[2] ITEM NAME', 0DH, 0AH,
                       DB '[3] ITEM QTY', 0DH, 0AH,
                       DB 'CHOICE: $'
                           
    PROMPT_NAME        DB 0Dh, 0Ah, 'Enter ITEM: $'
    PROMPT_ID          DB 0Dh, 0Ah, 'Enter ITEM ID: $'
    PROMPT_QTY          DB 0Dh, 0Ah, 'Enter ITEM QTY: $'
    
    PROMPT_NEW_NAME        DB 0Dh, 0Ah, 'Enter new ITEM NAME: $'
    PROMPT_NEW_ID          DB 0Dh, 0Ah, 'Enter new ITEM ID: $'
    PROMPT_NEW_QTY          DB 0Dh, 0Ah, 'Enter new ITEM QTY: $'
    
    PROMPT_SEARCH_ID   DB 0Dh, 0Ah, 'Enter ITEM ID to search: $' 
    
    CHOICE DB ?
    FOUND DB 0
    NEXT DW ?
    SEARCH_IND DW 0
    SLOT_SIZE DB 0
    CURRENT_SLOT DB 0
    
    AVAILABLE_SLOT DB 0
    
.CODE
   
    ;UTILS
    NEW_LINE PROC
        MOV AH, 02H
        MOV DL, 10
        INT 21H
        
        MOV DL, 13
        INT 21H
        RET
    NEW_LINE ENDP
    
    CLEAR_UTILS PROC
        
        MOV CX, 10
        MOV SI, OFFSET SEARCH_ID
        
        CLEAR_LOOP:
            MOV DL, [SI]
            MOV [SI], 42
            MOV DL, [SI]
            INC SI
            LOOP CLEAR_LOOP 
        RET
    CLEAR_UTILS ENDP
    
    CLEAR_OLD_DATA PROC
        
        CLEAR_DATA:
            CMP [SI], 42
            JE END_CLEAR
            MOV [SI], 42
            INC SI
            LOOP CLEAR_DATA
            
        END_CLEAR:
            
        RET
    CLEAR_OLD_DATA ENDP
    
    UPDATE_MENU_PROMPT PROC
        
        MOV AH, 09H
        LEA DX, UPDATE_TEXT
        INT 21H
        
        RET
    UPDATE_MENU_PROMPT ENDP
    
    NAME_PROMPT PROC
        
        MOV AH, 09H
        LEA DX, NAME_MSG
        INT 21H
        
        RET
    NAME_PROMPT ENDP
        
        
    ID_PROMPT PROC
        
        MOV AH, 09H
        LEA DX, ID_MSG
        INT 21H
        
        RET
    ID_PROMPT ENDP
    
    QTY_PROMPT PROC
        
        MOV AH, 09H
        LEA DX, QTY_MSG
        INT 21H
        
        RET
    QTY_PROMPT ENDP
    
    ;DISPLAYS
    
    MENU PROC
        
        MOV AH, 09H
        LEA DX, MENU_TEXT
        INT 21H
         
        RET
    MENU ENDP
      
    ;INPUTS
    
    INPUT_PROMPT PROC
        
        MOV AH, 01H
        INT 21H
        
        RET
    INPUT_PROMPT ENDP
    
    INPUT_ITEM_DATA PROC
        
        MOV AH, 01H
        
        INPUT_LOOP:
            INT 21H
            
            CMP AL, 13
            JE END_INPUT
            
            MOV [SI], AL
            
            INC SI
            LOOP INPUT_LOOP
        
        END_INPUT:
        
        RET
    INPUT_ITEM_DATA ENDP
    
    SEARCH_PROMPT PROC
        MOV AH, 09H
        LEA DX, PROMPT_SEARCH_ID
        INT 21H
        
        ; PARAM
        
        MOV CX, 0
        MOV CL, MAX_ID_SIZE
        
        MOV SI, OFFSET SEARCH_ID
        
        CALL INPUT_ITEM_DATA

        CALL SEARCH_ITEM
        RET
    SEARCH_PROMPT ENDP
    
    SEARCH_ITEM PROC
        
        MOV CX, 0
        
        SEARCH:
            MOV SI, OFFSET TAKEN_LIST
            ADD SI, COUNTER
            
            MOV AX, MAX_ITEM_COUNT
            CMP COUNTER, AX
            JE  END_SEARCH
            
            CMP [SI], 0
            JE CONTINUE_SEARCH
            
            MOV AH, 0
            MOV AL, CURRENT_ITEM_COUNT
            
            CMP ITEM_SEARCHED, AL
            JE END_SEARCH
            
            INC ITEM_SEARCHED
            
            MOV AX, COUNTER
            
            MOV BH, 0
            MOV BL, MAX_ID_SIZE
            MUL BX
              
            MOV BX, AX
            
            MOV SI, OFFSET SEARCH_ID
            
            MOV CL, MAX_ID_SIZE
            
            COMPARE:
                MOV AL, [SI] 
                
                MOV AH, ITEM_IDS[BX]
                
                CMP ITEM_IDS[BX], AL
                JNE CONTINUE_SEARCH
                
                
                CMP ITEM_IDS[BX], 42
                JE  FOUND_SEARCH
                
                INC BX
                INC SI                     
                LOOP COMPARE
                
            JMP FOUND_SEARCH
            
            CONTINUE_SEARCH:
                INC COUNTER
                JMP SEARCH
        
        FOUND_SEARCH:
            MOV FOUND, 1
        
        END_SEARCH:
        MOV CX, COUNTER
        MOV SEARCH_IND, CX        
        MOV COUNTER, 0
        MOV ITEM_SEARCHED, 0
        
        RET
    SEARCH_ITEM ENDP
    
    SEARCH_SLOT PROC
        MOV CX, 0
        MOV SI, OFFSET TAKEN_LIST
        
        SEARCH_AVAILABLE_SLOT:
            CMP [SI], 0
            JE  END_SEARCH_SLOT
            
            CMP CL, MAX_ITEM_COUNT
            JE  END_SEARCH_SLOT
            INC SI
            INC CL
            JMP SEARCH_AVAILABLE_SLOT
                
        END_SEARCH_SLOT:
        
            MOV AVAILABLE_SLOT, CL
         
        RET
    SEARCH_SLOT ENDP
    
    DELETE_ITEM_DATA PROC
        
        DELETE_LOOP:
            CMP [SI], 42
            JE END_D
            
            MOV [SI], 42
            INC SI
            JMP DELETE_LOOP
        
        END_D:
            
        RET
    DELETE_ITEM_DATA ENDP
    
    DISPLAY_SLOT PROC
        
        MOV AH, 09H
        LEA DX, SLOT_MSG
        INT 21H
        
        MOV AH, 0
        MOV AL, CURRENT_SLOT
        INC AL
        
        CONVERT_INT:
        
            MOV DL, 10
            
            DIV DL
            
            MOV DH, 0
            MOV DL, AH
            
            PUSH DX
            
            MOV AH, 0
            INC SLOT_SIZE
            CMP AL, 0
            JNE  CONVERT_INT
            
        MOV CL, SLOT_SIZE
        MOV AH, 02H
        
        DISPLAY_INT:
            
            POP DX
            
            ADD DL, 48
            
            INT 21H
            LOOP DISPLAY_INT
         
        MOV SLOT_SIZE, 0        
        
        RET
    DISPLAY_SLOT ENDP
    
    CHECK_ID PROC
        
        MOV AH, 0
        MOV AL, AVAILABLE_SLOT
        
        MOV BH, 0
        MOV BL, MAX_ID_SIZE
        
        MUL BX
        MOV SI, OFFSET ITEM_IDS
        ADD SI, AX
        
        MOV CX, 0
        MOV CL, MAX_ID_SIZE
        
        MOV BX, 0
        
        COPY_INPT:
        
            CMP [SI], 42
            JE END_COPY
            
            MOV DL, [SI]
            MOV SEARCH_ID[BX], DL
            
            INC BX
            INC SI
            
            LOOP COPY_INPT
        
        END_COPY:
        
        CALL SEARCH_ITEM
        
        RET
    CHECK_ID ENDP
       
    INPUT_ITEM_DATAS PROC
                
        MOV  CURRENT_SLOT, AL
            
        CALL DISPLAY_SLOT
        MOV  CURRENT_SLOT, 0
        CALL NEW_LINE
        
        ;PARAM
        
        MOV AH, 09H
        LEA DX, PROMPT_ID
        INT 21H
        
        MOV AH, 0
        MOV AL, AVAILABLE_SLOT
        
        MOV BH, 0
        MOV BL, MAX_ID_SIZE
        
        MUL BX
        
        MOV CX, 0
        MOV CL, MAX_ID_SIZE
        
        MOV SI, OFFSET ITEM_IDS
        ADD SI, AX
          
        CALL INPUT_ITEM_DATA
        
        CALL CHECK_ID
        
        CALL CLEAR_UTILS
        
        MOV AL, 1
        AND AL, FOUND
        JNZ ID_ALREADY_EXIST
        
        ;PARAM
        MOV AH, 09H
        LEA DX, PROMPT_NAME
        INT 21H
        
        MOV AH, 0
        MOV AL, AVAILABLE_SLOT
        
        MOV BH, 0
        MOV BL, MAX_NAME_SIZE
        
        MUL BX
        
        MOV CX, 0
        MOV CL, MAX_NAME_SIZE
        
        MOV SI, OFFSET ITEM_NAMES
        ADD SI, AX
        
        CALL INPUT_ITEM_DATA
        
        ;PARAM
        MOV AH, 09H
        LEA DX, PROMPT_QTY
        INT 21H
        
        MOV AH, 0
        MOV AL, AVAILABLE_SLOT
        
        MOV BH, 0
        MOV BL, MAX_QTY_SIZE
        
        MUL BX
        
        MOV CX, 0
        MOV CL, MAX_QTY_SIZE
        
        MOV SI, OFFSET ITEM_QTY
        ADD SI, AX
        
        CALL INPUT_ITEM_DATA                  
        
        MOV BH, 0
        MOV BL, AVAILABLE_SLOT
        MOV AVAILABLE_SLOT, 0
        MOV TAKEN_LIST[BX], 1
                                                 
        ;RETURN VALUES                           
        INC  CURRENT_ITEM_COUNT
        
        RET
        
    INPUT_ITEM_DATAS ENDP
    
    UPDATE_ITEM_DATA PROC
        
        MOV AX, 03H
        INT 10H
           
        CALL NAME_PROMPT
        
        ;PARAM
        MOV AX, SEARCH_IND
        MOV BL, MAX_NAME_SIZE
        MUL BX
        
        MOV SI, OFFSET ITEM_NAMES
        ADD SI, AX
        
        CALL PRINT_ITEM_DATA
        
        CALL NEW_LINE
        
        CALL ID_PROMPT
        
        ;PARAM
        
        MOV AX, SEARCH_IND
        MOV BL, MAX_ID_SIZE
        MUL BX
        
        MOV SI, OFFSET ITEM_IDS
        ADD SI, AX
        
        CALL PRINT_ITEM_DATA
        
        CALL NEW_LINE
        
        CALL QTY_PROMPT
        
        ;PARAM
        
        MOV AX, SEARCH_IND
        MOV BL, MAX_QTY_SIZE
        MUL BX
        
        MOV SI, OFFSET ITEM_QTY
        ADD SI, AX
        
        CALL PRINT_ITEM_DATA
        
        CALL NEW_LINE
        
        MOV BX, SEARCH_IND 
        MOV CURRENT_SLOT, BL
        CALL DISPLAY_SLOT
        
        CALL NEW_LINE
         
        CALL UPDATE_MENU_PROMPT
        CALL INPUT_PROMPT
        
        CALL NEW_LINE
        
        MOV CHOICE, AL
        
        CMP CHOICE, 31H
        JMP UPDATE_ID
        CMP CHOICE, 32H
        JMP UPDATE_NAME
        CMP CHOICE, 33H
        JMP UPDATE_QTY
        
        JMP END_UPDATE 
        
        UPDATE_ID:
            ;PARAM
            MOV AH, 09H
            LEA DX, PROMPT_NEW_ID
            INT 21H
            
            MOV AH, 0
            MOV AX, SEARCH_IND
            
            MOV BH, 0
            MOV BL, MAX_ID_SIZE
            
            MUL BX
            
            MOV CX, 0
            MOV CL, MAX_ID_SIZE
            
            MOV SI, OFFSET ITEM_IDS
            ADD SI, AX
            
            CALL INPUT_ITEM_DATA
            CALL CLEAR_OLD_DATA
        
        JMP END_UPDATE
        
        UPDATE_NAME:
        
            ;PARAM
            MOV AH, 09H
            LEA DX, PROMPT_NEW_NAME
            INT 21H
            
            MOV AH, 0
            MOV AX, SEARCH_IND
            
            MOV BH, 0
            MOV BL, MAX_NAME_SIZE
            
            MUL BX
            
            MOV CX, 0
            MOV CL, MAX_NAME_SIZE
            
            MOV SI, OFFSET ITEM_NAMES
            ADD SI, AX
            
            CALL INPUT_ITEM_DATA 
            CALL CLEAR_OLD_DATA
        
        JMP END_UPDATE
        
        UPDATE_QTY:
        
            ;PARAM
            MOV AH, 09H
            LEA DX, PROMPT_NEW_QTY
            INT 21H
            
            MOV AH, 0
            MOV AX, SEARCH_IND
            
            MOV BH, 0
            MOV BL, MAX_QTY_SIZE
            
            MUL BX
            
            MOV CX, 0
            MOV CL, MAX_QTY_SIZE
            
            MOV SI, OFFSET ITEM_QTY
            ADD SI, AX
            
            CALL INPUT_ITEM_DATA  
            CALL CLEAR_OLD_DATA
        
        END_UPDATE:
                        
        MOV CURRENT_SLOT, 0
        
        MOV FOUND, 0
        MOV SEARCH_IND, 0
        
        CALL CLEAR_UTILS
        MOV AH, 01H
        INT 21H
        
        RET
    UPDATE_ITEM_DATA ENDP
    
    PRINT_ITEM_DATAS PROC
        
        MOV CX, 0
              
        PRINT_LOOP:
            MOV AH, 9H
            LEA DX, SHELF
            INT 21H
            CALL NEW_LINE
            
            MOV SI, OFFSET TAKEN_LIST
            ADD SI, CX
            CMP [SI], 0
            JE  EMPTY_SHELF
            
            ; MOVE CURSOR
            MOV AH, 02H
            MOV DH, SHELF_ROW
            MOV DL, SHELF_COL
            INT 10H
            
            INC SHELF_ROW
            
            CALL NAME_PROMPT
            
            ;PARAM
            MOV AX, 0
            
            MOV AL, CL
            MOV BX, 0
            MOV BL, MAX_NAME_SIZE
            
            MUL BX
            
            MOV SI, OFFSET ITEM_NAMES
            ADD SI, AX
            
            CALL PRINT_ITEM_DATA
            
            ; MOVE CURSOR
            MOV AH, 02H
            MOV DH, SHELF_ROW
            MOV DL, SHELF_COL
            INT 10H
            
            INC SHELF_ROW
            
            CALL ID_PROMPT
            
            ;PARAM
            MOV AX, 0                       
            MOV AL, CL
            MOV BX, 0
            MOV BL, MAX_ID_SIZE
            
            MUL BX
                                   
            MOV SI, OFFSET ITEM_IDS
            ADD SI, AX
            
            CALL PRINT_ITEM_DATA
            
            ; MOVE CURSOR
            MOV AH, 02H
            MOV DH, SHELF_ROW
            MOV DL, SHELF_COL
            INT 10H
            
            INC SHELF_ROW
            
            ;PARAM
            
            CALL QTY_PROMPT
            
            MOV AX, 0                       
            MOV AL, CL
            MOV BX, 0
            MOV BL, MAX_QTY_SIZE
            
            MUL BX
                                   
            MOV SI, OFFSET ITEM_QTY
            ADD SI, AX
            
            CALL PRINT_ITEM_DATA
            
            ; MOVE CURSOR
            MOV AH, 02H
            MOV DH, SHELF_ROW
            MOV DL, SHELF_COL
            INT 10H
            
            INC SHELF_ROW
            
            CALL DISPLAY_SLOT
            
            INC ITEM_PRINTED
            CALL NEW_LINE
            CALL NEW_LINE
            JMP CONTINUE_PRINT
            
            EMPTY_SHELF:
                
                ADD SHELF_ROW, 5
                    
            CONTINUE_PRINT:
                 
                INC CURRENT_SLOT
                
                ADD SHELF_ROW, 3
                
                MOV CL, CURRENT_SLOT
                
                MOV BH, 0
                MOV BL, ITEM_PRINTED
                CMP BL, CURRENT_ITEM_COUNT
                
            JNE PRINT_LOOP
            
        MOV ITEM_PRINTED, 0
        MOV CURRENT_SLOT, 0
        
        MOV AH, 01H
        INT 21H
        
        MOV SHELF_ROW, 2
        
        RET
    PRINT_ITEM_DATAS ENDP
    
    PRINT_ITEM_DATA PROC
        MOV AH, 02H    
        PRINT_DATA:
            MOV DL, [SI]
            
            CMP DL, 42
            JE  END_PSD
            
            INT 21H
            INC SI
            
            JMP PRINT_DATA
            
        END_PSD:    
        RET
    PRINT_ITEM_DATA ENDP
    
    REMOVE_ITEM PROC
            
        MOV AX, SEARCH_IND
        
        MOV BX, 0
        MOV BX, MAX_NAME_SIZE
        
        MUL BX
       
        MOV SI, OFFSET ITEM_NAMES
        ADD SI, AX
        
        CALL DELETE_ITEM_DATA
        
        MOV AX, SEARCH_IND
        
        MOV BX, 0
        MOV BX, MAX_ID_SIZE
        MUL BX
       
        MOV SI, OFFSET ITEM_IDS
        ADD SI, AX
        
        CALL DELETE_ITEM_DATA
        
        CALL NEW_LINE
        
        DEC CURRENT_ITEM_COUNT
        
        MOV BX, SEARCH_IND
        MOV TAKEN_LIST[BX], 0
        
        MOV AH, 09H
        LEA DX, ITEM_DELETED_MSG
        INT 21H
        
        MOV AH, 01H
        INT 21H
        
        CALL CLEAR_UTILS
    
        MOV FOUND, 0
        MOV SEARCH_IND, 0
                
        RET
    REMOVE_ITEM ENDP
    
    MAIN PROC
        
        MOV AX, @DATA
        MOV DS, AX
        
        MENU_INTERFACE:
            
            MOV AX, 03H
            INT 10H
             
            CALL MENU
            
            CALL INPUT_PROMPT
            
            MOV CHOICE, AL
            
            CALL NEW_LINE
                   
            CMP CHOICE, 31H
            JE  INPUT_ITEM_DATA_LABEL
            CMP CHOICE, 32H
            JE  UPDATE_ITEM_DATA_LABEL       
            CMP CHOICE, 33H
            JE  PRINT_ITEM_DATA_LABEL
            CMP CHOICE, 34H
            JE  REMOVE_ITEM_LABEL
            CMP CHOICE, 35H
            JE  EXIT
            JMP MENU_INTERFACE
            
            INPUT_ITEM_DATA_LABEL:
                
                CALL NEW_LINE
                
                CALL SEARCH_SLOT
                
                MOV  AL, AVAILABLE_SLOT
                
                CMP AL, MAX_ITEM_COUNT
                JE  FULL_PARKING
                
                CALL INPUT_ITEM_DATAS               
                                                         
                JMP MENU_INTERFACE                       
            
            UPDATE_ITEM_DATA_LABEL:
                
                CMP  CURRENT_ITEM_COUNT, 0
                JE   EMPTY_REGISTRY
                
                CALL SEARCH_PROMPT
                
                CALL NEW_LINE
                
                MOV AL, 1
                AND AL, FOUND
                JZ  NOT_FOUND
                
                CALL UPDATE_ITEM_DATA
                
                JMP MENU_INTERFACE
                                                             
            PRINT_ITEM_DATA_LABEL:
                
                CALL NEW_LINE
                
                MOV AX, 03H
                INT 10H
            
                CMP  CURRENT_ITEM_COUNT, 0
                JE   EMPTY_REGISTRY                          
                
                CALL PRINT_ITEM_DATAS
                
                JMP MENU_INTERFACE
           
            REMOVE_ITEM_LABEL:
            
                CALL NEW_LINE
                
                CMP  CURRENT_ITEM_COUNT, 0
                JE   EMPTY_REGISTRY
                
                CALL SEARCH_PROMPT
                
                MOV AL, 1
                AND AL, FOUND
                JZ  NOT_FOUND
                
                CALL REMOVE_ITEM
                
                JMP MENU_INTERFACE
                
        
        ID_ALREADY_EXIST:
            CALL NEW_LINE
            
            MOV AH, 09H
            LEA DX, ALREADY_EXIST_MSG
            INT 21H
            
            MOV AH, 01H
            INT 21H
            
            MOV AH, 0
            MOV AL, AVAILABLE_SLOT
        
            MOV BX, 0
            MOV BX, MAX_ID_SIZE
            MUL BX
           
            MOV SI, OFFSET ITEM_IDS
            ADD SI, AX
            
            CALL DELETE_ITEM_DATA
            
            MOV FOUND, 0
            MOV SEARCH_IND, 0
            
            JMP MENU_INTERFACE
            
        NOT_FOUND:
            CALL NEW_LINE
            
            MOV AH, 09H
            LEA DX, NOT_FOUND_MSG
            INT 21H
            
            MOV AH, 01H
            INT 21H
            
            CALL CLEAR_UTILS
            
            MOV FOUND, 0
            MOV SEARCH_IND, 0
            
            JMP MENU_INTERFACE
        
        FULL_PARKING:
            CALL NEW_LINE
            
            MOV AH, 09H
            LEA DX, FULL_LOT_MSG
            INT 21H
            
            MOV AH, 01H
            INT 21H
            
            JMP MENU_INTERFACE
            
        EMPTY_REGISTRY:
            CALL NEW_LINE
            
            MOV AH, 09H  
            LEA DX, EMPTY_REGISTRY_MSG
            INT 21H
            
            MOV AH, 01H
            INT 21H
            
            JMP MENU_INTERFACE
                              
        EXIT:                
        MOV AH, 4CH
        INT 21H
        
    END MAIN